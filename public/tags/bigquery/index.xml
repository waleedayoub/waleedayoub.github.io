<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bigquery on Waleed Ayoub</title>
    <link>http://localhost:1313/tags/bigquery/</link>
    <description>Recent content in Bigquery on Waleed Ayoub</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2024 09:40:43 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/bigquery/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prefect.io POC - Building ETL Pipeline for Toronto Bicycle Data</title>
      <link>http://localhost:1313/post/toronto-bicycle-data/</link>
      <pubDate>Wed, 03 Jan 2024 09:40:43 -0500</pubDate>
      <guid>http://localhost:1313/post/toronto-bicycle-data/</guid>
      <description>&lt;h1 id=&#34;toronto-bicycle-data-engineering&#34;&gt;Toronto Bicycle Data Engineering&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can find all the code for this project here: &lt;a href=&#34;https://github.com/waleedayoub/toronto-bicycle-data&#34;&gt;https://github.com/waleedayoub/toronto-bicycle-data&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;This was a project I explored as part of the &lt;a href=&#34;https://github.com/DataTalksClub/data-engineering-zoomcamp/blob/main/week_7_project/README.md&#34;&gt;final project&lt;/a&gt; of the datatalks club data engineering zoomcamp&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;project-description&#34;&gt;Project Description&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The goal of this project is to examine historical bike share ridership going as far back as 2016 in the city of Toronto, Ontario.&lt;/li&gt;&#xA;&lt;li&gt;The city of Toronto has an open data sharing mandate, and all bike share data can be found here: &lt;a href=&#34;https://open.toronto.ca/dataset/bike-share-toronto/&#34;&gt;https://open.toronto.ca/dataset/bike-share-toronto/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Unfortunately, the data is not consistently named or labeled across years (2014-2022, inclusively), so there is a need to perform quite a bit of processing to handle it.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For example, in some years, data is stored in tabs in XLSX files, whereas in other years, they are CSVs broken down by quarters, or in other cases, by months, in CSV files&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Given that this analysis focuses on historical ridership, a batch processing pipeline is sufficient, and can be scheduled to run monthly or quarterly.&lt;/li&gt;&#xA;&lt;li&gt;It is unclear how often the data refreshes, but the following program handles edge cases and checks whether data has been updated before triggering pipelines&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The architecture for this project is kept fairly simple:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div style=&#34;max-width: 100%; overflow: hidden;&#34;&gt;&#xA;    &lt;img src=&#34;http://localhost:1313/images/bikedataarch.png&#34; alt=&#34;Data arch for toronto bicycle data&#34; style=&#34;width: 100%; height: auto;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;data-sources&#34;&gt;Data sources&lt;/h2&gt;&#xA;&lt;h3 id=&#34;toronto&#34;&gt;Toronto&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ridership data: &lt;a href=&#34;https://open.toronto.ca/dataset/bike-share-toronto-ridership-data/&#34;&gt;https://open.toronto.ca/dataset/bike-share-toronto-ridership-data/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;For batch data, here&amp;rsquo;s an example of how to access the ridership data API:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ckan0.cf.opendata.inter.prod-toronto.ca&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base_url &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/3/action/package_show&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bike-share-toronto-ridership-data&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;If you do a GET request on the package_url with params provided like this:&#xA;&lt;code&gt;resource = requests.get(url, params=params).json()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can then grab the url where the data is stored like this:&#xA;&lt;code&gt;resource[&amp;quot;result&amp;quot;][&amp;quot;resources&amp;quot;][&amp;quot;url&amp;quot;]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;And the url will be something like this:&#xA;&lt;a href=&#34;https://ckan0.cf.opendata.inter.prod-toronto.ca/dataset/7e876c24-177c-4605-9cef-e50dd74c617f/resource/85326868-508c-497e-b139-b698aaf27bbf/download/bikeshare-ridership-2014-2015.xlsx&#34;&gt;https://ckan0.cf.opendata.inter.prod-toronto.ca/dataset/7e876c24-177c-4605-9cef-e50dd74c617f/resource/85326868-508c-497e-b139-b698aaf27bbf/download/bikeshare-ridership-2014-2015.xlsx&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;You can then do another GET request on that URL and write to a file in Python&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;deployment-instructions&#34;&gt;Deployment instructions&lt;/h2&gt;&#xA;&lt;h3 id=&#34;technologies-used&#34;&gt;Technologies used&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GCP / Cloud Storage / BigQuery / Looker&lt;/li&gt;&#xA;&lt;li&gt;Terraform&lt;/li&gt;&#xA;&lt;li&gt;Prefect / DBT&lt;/li&gt;&#xA;&lt;li&gt;Python 3.9.16 / virtualenv&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;things-you-need-to-install--versions&#34;&gt;Things you need to install + versions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Google cloud SDK: &lt;a href=&#34;https://cloud.google.com/sdk/docs/install&#34;&gt;https://cloud.google.com/sdk/docs/install&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Terraform 1.4.5: &lt;a href=&#34;https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli&#34;&gt;https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Python: make sure you&amp;rsquo;re running 3.9.16&lt;/li&gt;&#xA;&lt;li&gt;Prefect 2.10.4: &lt;a href=&#34;https://docs.prefect.io/latest/getting-started/installation/&#34;&gt;https://docs.prefect.io/latest/getting-started/installation/&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It is &lt;em&gt;very&lt;/em&gt; important to get the prefect version right as GCS block&amp;rsquo;s &lt;code&gt;upload_from_dataframe()&lt;/code&gt; &lt;a href=&#34;https://prefecthq.github.io/prefect-gcp/cloud_storage/#prefect_gcp.cloud_storage.GcsBucket.upload_from_dataframe&#34;&gt;method&lt;/a&gt; doesn&amp;rsquo;t work in older versions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;step-0&#34;&gt;Step 0&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Clone or copy this repo: &lt;code&gt;git clone git@github.com:waleedayoub/toronto-bicycle-data.git&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;step-1---initial-setup--gcp&#34;&gt;Step 1 - Initial Setup + GCP&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a service account in GCP and download the service account json (In the IAM &amp;amp; Admin section of the GCP console)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
